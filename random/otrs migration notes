***************************ORTS MIGRATION STRATEGY ******************************

==================================================================================

A) MIGRATING THE DATABASE FROM MYSQL TO POSTGRESQL 

==================================================================================

To do this the easy way with all the contraints and indexes intact and to save the most time, we shall be using the tool pgloader.

1) grab the latest copy from here : 

git clone https://github.com/dimitri/pgloader.git

2) install the following dependencies for pgloader to work with (remember , they might be different depending on the linux distro in use. the cache search too will come in handy in this case ) 

apt-get install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev

Or for SUSE do :

zypper install sbcl unzip libsqlite3-dev make curl gawk freetds-dev libzip-dev

3) change directory to the donwloaded pgloader file 
cd /path/to/pgloader

4) run the make command 

make pgloader

5) when the make is done with no error, its time to move the data from MySQL to Postgresql

6) In postgresql, create a database otrs and a user otrs with a super user privilege. Note, if the orts user is used in the MySQL database, make sure the password is same as well in the PostgreSQL database.

	CREATE ROLE otrs WITH superuser encrypted password 'somethingsecrete' ;  
	CREATE DATABASE otrs WITH OWNER otrs ;

-- allow appropriate access in the pg_hba.conf file

7) change directory to the build folder in the pgloader folder

	cd ./build/bin

8) Place the pg.load config file in the bin folder

9) run the command that moves the data

	./pgloader pg.load

10) this will give some output in the console that shows the progress of the migration.

11) when the migration is done and successful, rename the otrs schema in postgresql to public

	DROP SCHEMA public CASCADE ;
	ALTER SCHEMA otrs RENAME TO public.

12) End of story one. Hope this works well for you as it did for me.


===================================================================================

B)			CONNECTING TO THE POSTGRESQL DATABASE FROM OTRS

===================================================================================

To use postgres database an optional package DBD::Pg must be installed. This can be installed from the CPAN modules.

1) Invoke the CPAN console by executing the command 

	perl -MCPAN -e shell

2) in the resulting console after the first command , run the follwoing command 

	install DBD::Pg

3) If the installation goes well , there should be an Ok statement at the end of it, else investigate the possible cause of the error message. It should be noted that C compilers are required, hence check to see if gmake,gcc and g++ are installed.

4) exit the console when the installation is done 
	
	exit


======================================================================================

C) 		EDITING OTRS CONFIG FILES TO ALLOW PG CONNECTION
======================================================================================

1) edit the following file /opt/otrs/scripts/apache2-perl-startup.pl and uncomment the following lines

	#use DBD::Pg ();
	#use Kernel::System::DB::postgresql;

	This should become

	use DBD::Pg ();
	use Kernel::System::DB::postgresql;

2) edit the file /opt/otrs/Kernel/Config.pm and change the following lines 

-- comment this line 
	$Self->{DatabaseDSN} = "DBI:mysql:database=$Self->{Database};host=$Self->{DatabaseHost};";

	should become 
	# $Self->{DatabaseDSN} = "DBI:mysql:database=$Self->{Database};host=$Self->{DatabaseHost};";

-- uncomment the line 
	#    $Self->{DatabaseDSN} = "DBI:Pg:dbname=$Self->{Database};host=$Self->{DatabaseHost};";

	should become 

	    $Self->{DatabaseDSN} = "DBI:Pg:dbname=$Self->{Database};host=$Self->{DatabaseHost};";

3) Stop the services running

	sudo service apache2 stop
	sudo service cron stop
	sudo /opt/otrs/bin/Cron.sh stop otrs
	sudo /opt/bin/otrs.Scheduler.pl -a stop

4) restart all the services 

	sudo service apache2 start
	sudo service cron start
	sudo /opt/otrs/bin/Cron.sh start otrs
	sudo /opt/bin/otrs.Scheduler.pl -a start

5) connect to otrs from the browser 

	http://hostname/otrs/index.pl

6) this should successfully log you onto the instance running with the postgresql database.



===============================================================================

 			UPGRADING OTRS
===============================================================================

Upgrading otrs is a little tricky. The upgrade procedures depend on if the upgrade is to a minor version or a major version.

The upgrate steps that are needed are : 

3.1.2 -*-> 3.1.21 -**-> 3.2.1 -*-> 3.2.17 -**-> 3.3.0.rc1 -*-> 3.3.13 -**-> 4.0.0.rc1 -*-> 4.0.8

Minor upgrade are marked as 	-*->
Major upgrade are marked as 	-**->

Below is a step by step proc of how to carry out both


=================================================================================

C)			MINOR VERSION UPGRADE (-*->)
=================================================================================

Minor version upgrade involves an upgrade from x.y.p to x.y.q

1) Stop all services that are or might be accessing otrs

	sudo service apache2 stop
	sudo service cron stop
	sudo /opt/otrs/bin/Cron.sh stop otrs
	sudo /opt/bin/otrs.Scheduler.pl -a stop

2) Make a copy of the otrs folder and of the database

	sudo mv /opt/otrs /opt/otrs_old_version

	pg_dump ..... (use pg_dump or anyother method to backup the postgresql database )

3) grab the latest minor version source from here (make sure only the last digit changes here i.e from x.y.p to x.y.z)
	
	http://ftp.otrs.org/pub/otrs/

4) Untar the downloaded source, move it to /opt and rename it to otrs

	sudo mv downloaded-Source-x.y.z.tar.gz /opt
	sudo tar -zxf downloaded-Source-x.y.z.tar.gz
	sudo mv downloaded-Source-x.y.z otrs

5) Restore the following files from the old installation 

	sudo cp /opt/otrs_old_version/Kernel/Config.pm /opt/otrs/Kernel/Config.pm
	sudo cp /opt/otrs_old_version/Kernel/Config/Files/ZZZAuto.pm /opt/otrs/Kernel/Config/Files/ZZZAuto.pm
	sudo cp /opt/otrs_old_version/Kernel/Config/GenericAgent.pm /opt/otrs/Kernel/Config/GenericAgent.pm

6) Restore TicketCounter.log

	sudo cp /opt/otrs_old_version/var/log/TicketCounter.log /opt/otrs/var/log/TicketCounter.log 

 
 7) Restore the article files as well 

	sudo cp /opt/otrs_old_version/var/article/* /opt/otrs/var/article/*

8) Set the file permission to the otrs user 

	-- version before 4.0 use this 
	** Debian 
	sudo ./otrs.SetPermissions.pl --otrs-user=otrs --otrs-group=otrs --web-user=www-data --web-group=www-data /opt/otrs

	** SUSE 
	sudo ./otrs.SetPermissions.pl --otrs-user=otrs --otrs-group=otrs --web-user=wwwrun --web-group=wwwrun /opt/otrs

	
	--version from 4.0 use 

	** Debian 
	sudo ./otrs.SetPermissions.pl --otrs-user=otrs --web-group=www-data /opt/otr

	** SUSE
	sudo ./otrs.SetPermissions.pl --otrs-user=otrs --web-group=wwwrun /opt/otr

9) Check needed Perl modules

	sudo /opt/otrs/bin/otrs.CheckModules.pl

10) Restore own or custom made themes

	Note: The OTRS themes of 3.3 are NOT compatible with OTRS 4, so don't use your old themes!
       Themes are located under /opt/otrs/Kernel/Output/HTML/*/*.tt.

11)  Refresh the configuration cache and delete caches. This has to be ran as the otrs user

	sudo su otrs 
	bin/otrs.RebuildConfig.pl
	bin/otrs.DeleteCache.pl	

11b) recreate the config file in apache2 for major upgrade. Though this is not necessary after upgrades from version 3.1 to 3.2

	sudo cp -va /opt/otrs/scripts/apache2-httpd.include.conf /etc/apache2/sites-available/otrs.conf
	
12) Restart all the services

	sudo service apache2 stop
	sudo service cron stop
	sudo /opt/otrs/bin/Cron.sh stop otrs
	sudo /opt/bin/otrs.Scheduler.pl -a stop

13) Check installed packages

<notice> The OTRS packages of 3.3 are NOT compatible with OTRS 4, so you have to perform a package upgrade! </notice>
The following packages are automatically uninstalled after the upgrade process (if they where installed before):
OTRSGenericInterfaceREST
OTRSMyServices
OTRSStatsRestrictionByDateTimeDF
Support

14) Update and activate cronjobs

	cd /opt/otrs/var/cron
	for foo in *.dist; do cp $foo `basename $foo .dist`; done

15) Start the cron service as the otrs user

	sudo /opt/otrs/bin/Cron.sh start otrs


16) login to the web and check if all went well






=================================================================================

D)			MAJOR VERSION UPGRADE (-**->)
=================================================================================

Minor version upgrade involves an upgrade from x.y.p to x.y.q

1) Stop all services that are or might be accessing otrs

	sudo service apache2 stop
	sudo service cron stop
	sudo /opt/otrs/bin/Cron.sh stop otrs
	sudo /opt/bin/otrs.Scheduler.pl -a stop

2) Make a copy of the otrs folder and of the database

	sudo mv /opt/otrs /opt/otrs_old_version

	pg_dump ..... (use pg_dump or anyother method to backup the postgresql database )

3) grab the latest minor version source from here (make sure only the last digit changes here i.e from x.y.p to x.y.z)
	
	http://ftp.otrs.org/pub/otrs/

4) Untar the downloaded source, move it to /opt and rename it to otrs

	sudo mv downloaded-Source-x.y.z.tar.gz /opt
	sudo tar -zxf downloaded-Source-x.y.z.tar.gz
	sudo mv downloaded-Source-x.y.z otrs

5) Restore the following files from the old installation 

	sudo cp /opt/otrs_old_version/Kernel/Config.pm /opt/otrs/Kernel/Config.pm
	sudo cp /opt/otrs_old_version/Kernel/Config/Files/ZZZAuto.pm /opt/otrs/Kernel/Config/Files/ZZZAuto.pm
	sudo cp /opt/otrs_old_version/Kernel/Config/GenericAgent.pm /opt/otrs/Kernel/Config/GenericAgent.pm

6) Restore TicketCounter.log

	sudo cp /opt/otrs_old_version/var/log/TicketCounter.log /opt/otrs/var/log/TicketCounter.log 

 
 7) Restore the article files as well 

	sudo cp /opt/otrs_old_version/var/article/* /opt/otrs/var/article/*

8) Set the file permission to the otrs user 

	-- version before 4.0 use this 
	** Debian 
	sudo ./otrs.SetPermissions.pl --otrs-user=otrs --otrs-group=otrs --web-user=www-data --web-group=www-data /opt/otrs

	** SUSE 
	sudo ./otrs.SetPermissions.pl --otrs-user=otrs --otrs-group=otrs --web-user=wwwrun --web-group=wwwrun /opt/otrs

	
	--version from 4.0 use 

	** Debian 
	sudo ./otrs.SetPermissions.pl --otrs-user=otrs --web-group=www-data /opt/otr

	** SUSE
	sudo ./otrs.SetPermissions.pl --otrs-user=otrs --web-group=wwwrun /opt/otr

9) Check needed Perl modules

	sudo /opt/otrs/bin/otrs.CheckModules.pl

10) Database schema update

	cd /opt/otrs/scripts

	vi DBUpdate-to-x.y.postgresql.sql

-- From the above file, check out for the lines that drops indexes or constraints. During the migration from MySQL to PostgreSQL, some of those indexes and constraints have been renamed by postgresql. Hence this script will not be executed if not edited.
-- copy all the index names that are to be droped and run a query like this in postgres to get the new index names

	version 3.1 to 3.2 
	
	select * from pg_stat_user_indexes where indexrelname like '%ticket_answered%' or 
	indexrelname like '%article_flag_create_by%' or
	indexrelname like '%article_flag_article_id_article_key%' or 
	indexrelname like '%ticket_queue_view%'

	version 3.2 to 3.3

	select * from pg_stat_user_indexes where indexrelname like '%index_search_date%' or 
	indexrelname like '%index_search_int%' or
	indexrelname like '%index_field_values%' or 
	indexrelname like '%article_message_id%' or
	indexrelname like '%article_search_message_id%' or
	indexrelname like '%virtual_fs_db_filename%' or
	indexrelname like '%virtual_fs_filename%'

	3.3 to 4

	change this line 

	ALTER TABLE standard_response DROP CONSTRAINT idx_30991_standard_response_name; 
	
	to 

	DROP INDEX idx_30991_standard_response_name ;

-- Having performed the necessary substitutions, execute the command 


	sudo cat scripts/DBUpdate-to-x.y.postgresql.sql | psql -h hostname -p port --set ON_ERROR_STOP=on --single-transaction otrs otrs

-- If this returns without an error, then all went well

11) Database migration script. This should be ran as the otrs user 

	sudo su otrs 
	scripts/DBUpdate-to-4.pl

-- Do not continue the upgrading process if this script did not work properly for you. Otherwise data loss may occur.
	

12) Restore own or custom made themes

	Note: The OTRS themes of 3.3 are NOT compatible with OTRS 4, so don't use your old themes!
       Themes are located under /opt/otrs/Kernel/Output/HTML/*/*.tt.

13)  Refresh the configuration cache and delete caches. This has to be ran as the otrs user

	sudo su otrs 
	bin/otrs.RebuildConfig.pl
	bin/otrs.DeleteCache.pl	
	
14) Restart all the services

	sudo service apache2 stop
	sudo service cron stop
	sudo /opt/otrs/bin/Cron.sh stop otrs
	sudo /opt/bin/otrs.Scheduler.pl -a stop

15) Check installed packages

<notice> The OTRS packages of 3.3 are NOT compatible with OTRS 4, so you have to perform a package upgrade! </notice>
The following packages are automatically uninstalled after the upgrade process (if they where installed before):
OTRSGenericInterfaceREST
OTRSMyServices
OTRSStatsRestrictionByDateTimeDF
Support

16) Check GenericAgent jobs

If you have any GenericAgent jobs (or even any custom developments) that automatically set ProcessID or ActivityID dynamic fields, you need to update these to set the fields to the new long EntityIDs that were generated by DBUpdate-to-4.pl.


17) Update and activate cronjobs

	cd /opt/otrs/var/cron
	for foo in *.dist; do cp $foo `basename $foo .dist`; done

18) Start the cron service as the otrs user

	sudo /opt/otrs/bin/Cron.sh start otrs

19) Update Customer database configuration

If you're using an external customer database and this database does NOT provide the OTRS specific fields create_time, create_by, change_time and change_by, please set ForeignDB => 1 for $Self->{CustomerUser} and $Self->{CustomerCompany} (see Kernel/Config/Defaults.pm).

20) Rebuild Ticket index

	sudo bin/otrs.RebuildTicketIndex.pl

21) login to the web and check if all went well
